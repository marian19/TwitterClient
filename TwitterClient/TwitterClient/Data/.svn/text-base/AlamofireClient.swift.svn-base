//
//  AlamofireClient.swift
//  SPOC
//
//  Created by avc on 2017-07-04.
//  Copyright Â© 2017 avc. All rights reserved.
//

import Foundation
import Alamofire

struct AlamofireClient: APIClient {
    
    //MARK: Shared Instance
    
    static let sharedInstance =  AlamofireClient()
    
    fileprivate init() {
        
    }
    
    
    func executeGetRequest(url:String,parameters: [String:Any]?,header : [String:String]?,compilationHandler:@escaping (Any?,Error?) -> Void){
    
        Alamofire.request(url, parameters: parameters, headers: header).responseJSON { (response:DataResponse<Any>) in
            switch(response.result) {
            case .success(_):
                if let data = response.result.value{
                    print(response.result.value!)
                    compilationHandler(data,nil)
                    
                }
                break
                
            case .failure(_):
                print(response.result.error!)
                print (response.response?.description ?? "default value")
                compilationHandler(nil,response.result.error!)

                break
                
            }
        }
    }
    
    func executePostRequest(url:String,parameters: [String:Any]?,header : [String:String]?,compilationHandler:@escaping (Any?,Error?) -> Void){
    
        Alamofire.request(url, method: .post, parameters: parameters, encoding: JSONEncoding.default, headers: header ).responseJSON { (response:DataResponse<Any>) in
            
            switch(response.result) {
            case .success(_):
                if let data = response.result.value{
                    print(response.result.value!)
                    compilationHandler(data,nil)
                }
                break
                
            case .failure(_):
                compilationHandler(nil,response.result.error!)
                print(response.result.error!)
                break
                
            }
        }
    }
    
    
//    func executePostRequest(url:String,parameters: [String:Any]?,header : [String:String]?) -> Observable<Any>? {
//        
//        
//        return Observable.create({ (observer) -> Disposable in
//            
//            let request = Alamofire.request(url, method: .post, parameters: parameters, encoding: JSONEncoding.default, headers: header)
//                .responseJSON(completionHandler: { (firedResponse) -> Void in
//                    if let value = firedResponse.result.value {
//                        observer.onNext(value)
//                        observer.onCompleted()
//                    } else if let error = firedResponse.result.error {
//                        observer.onError(error)
//                    }
//                })
//            return Disposables.create(with: { request.cancel() })
//        })
//        
//    }
//    
//    func executeGetRequest(url:String,parameters: [String:Any]?,header : [String:String]?) -> Observable<Any>?{
//        
//        return Observable.create({ (observer) -> Disposable in
//            
//            let request = Alamofire.request(url, parameters: parameters, encoding: JSONEncoding.default, headers: header)
//                .responseJSON(completionHandler: { (firedResponse) -> Void in
//                    if let value = firedResponse.result.value {
//                        observer.onNext(value)
//                        observer.onCompleted()
//                    } else if let error = firedResponse.result.error {
//                        observer.onError(error)
//                    }
//                })
//            return Disposables.create(with: { request.cancel() })
//        })
//    }
//    
    
    
}
